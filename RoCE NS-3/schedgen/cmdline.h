/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "schedgen"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "schedgen"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * ptrn_arg;	/**< @brief Name of the communication pattern that should be used to generate a schedule (default='binomialtreebcast').  */
  char * ptrn_orig;	/**< @brief Name of the communication pattern that should be used to generate a schedule original value given at command line.  */
  const char *ptrn_help; /**< @brief Name of the communication pattern that should be used to generate a schedule help description.  */
  int commsize_arg;	/**< @brief Number of nodes that should be used in the communication pattern (default='8').  */
  char * commsize_orig;	/**< @brief Number of nodes that should be used in the communication pattern original value given at command line.  */
  const char *commsize_help; /**< @brief Number of nodes that should be used in the communication pattern help description.  */
  int timemult_arg;	/**< @brief Time multiplier, relative to microsecond (e.g., nanoseconds -> 1000) (default='1000').  */
  char * timemult_orig;	/**< @brief Time multiplier, relative to microsecond (e.g., nanoseconds -> 1000) original value given at command line.  */
  const char *timemult_help; /**< @brief Time multiplier, relative to microsecond (e.g., nanoseconds -> 1000) help description.  */
  int datasize_arg;	/**< @brief Number of bytes that are transmitted in the communication patttern in a basic step (default='1').  */
  char * datasize_orig;	/**< @brief Number of bytes that are transmitted in the communication patttern in a basic step original value given at command line.  */
  const char *datasize_help; /**< @brief Number of bytes that are transmitted in the communication patttern in a basic step help description.  */
  char * filename_arg;	/**< @brief Filename for the name of the generated schedule (default='schedule.goal').  */
  char * filename_orig;	/**< @brief Filename for the name of the generated schedule original value given at command line.  */
  const char *filename_help; /**< @brief Filename for the name of the generated schedule help description.  */
  int nway_arg;	/**< @brief Fanout for the n-way dissemination pattern (default='1').  */
  char * nway_orig;	/**< @brief Fanout for the n-way dissemination pattern original value given at command line.  */
  const char *nway_help; /**< @brief Fanout for the n-way dissemination pattern help description.  */
  int root_arg;	/**< @brief Root node for certain patterns (default='0').  */
  char * root_orig;	/**< @brief Root node for certain patterns original value given at command line.  */
  const char *root_help; /**< @brief Root node for certain patterns help description.  */
  int segmentsize_arg;	/**< @brief Segment size for pipelined pattern (default='1').  */
  char * segmentsize_orig;	/**< @brief Segment size for pipelined pattern original value given at command line.  */
  const char *segmentsize_help; /**< @brief Segment size for pipelined pattern help description.  */
  int nb_arg;	/**< @brief nonblocking execution of collectives (provide length of local operation) (default='0').  */
  char * nb_orig;	/**< @brief nonblocking execution of collectives (provide length of local operation) original value given at command line.  */
  const char *nb_help; /**< @brief nonblocking execution of collectives (provide length of local operation) help description.  */
  int nb_poll_arg;	/**< @brief polling interval for nonblocking execution (default='0').  */
  char * nb_poll_orig;	/**< @brief polling interval for nonblocking execution original value given at command line.  */
  const char *nb_poll_help; /**< @brief polling interval for nonblocking execution help description.  */
  int cpu_arg;	/**< @brief select CPU to execute computation (default='0').  */
  char * cpu_orig;	/**< @brief select CPU to execute computation original value given at command line.  */
  const char *cpu_help; /**< @brief select CPU to execute computation help description.  */
  char * traces_arg;	/**< @brief Tracefile for rank 0 (others are autodetected).  */
  char * traces_orig;	/**< @brief Tracefile for rank 0 (others are autodetected) original value given at command line.  */
  const char *traces_help; /**< @brief Tracefile for rank 0 (others are autodetected) help description.  */
  char * traces_start_arg;	/**< @brief file with start lines in trace files (is updated after run if trace-nops is given).  */
  char * traces_start_orig;	/**< @brief file with start lines in trace files (is updated after run if trace-nops is given) original value given at command line.  */
  const char *traces_start_help; /**< @brief file with start lines in trace files (is updated after run if trace-nops is given) help description.  */
  int traces_nops_arg;	/**< @brief number of operations to write to file (0=all) (default='0').  */
  char * traces_nops_orig;	/**< @brief number of operations to write to file (0=all) original value given at command line.  */
  const char *traces_nops_help; /**< @brief number of operations to write to file (0=all) help description.  */
  int traces_extr_arg;	/**< @brief extrapolation factor for traces (default='1').  */
  char * traces_extr_orig;	/**< @brief extrapolation factor for traces original value given at command line.  */
  const char *traces_extr_help; /**< @brief extrapolation factor for traces help description.  */
  int traces_print_arg;	/**< @brief print each operation (default='0').  */
  char * traces_print_orig;	/**< @brief print each operation original value given at command line.  */
  const char *traces_print_help; /**< @brief print each operation help description.  */
  int traces_nop2p_flag;	/**< @brief do not consider point-to-point communication (default=off).  */
  const char *traces_nop2p_help; /**< @brief do not consider point-to-point communication help description.  */
  int traces_nocolls_flag;	/**< @brief do not consider collective communication (default=off).  */
  const char *traces_nocolls_help; /**< @brief do not consider collective communication help description.  */
  int traces_nbcify_arg;	/**< @brief turn blocking collectives into non-blocking colls, time to pre-post NBCs (default='0').  */
  char * traces_nbcify_orig;	/**< @brief turn blocking collectives into non-blocking colls, time to pre-post NBCs original value given at command line.  */
  const char *traces_nbcify_help; /**< @brief turn blocking collectives into non-blocking colls, time to pre-post NBCs help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int ptrn_given ;	/**< @brief Whether ptrn was given.  */
  unsigned int commsize_given ;	/**< @brief Whether commsize was given.  */
  unsigned int timemult_given ;	/**< @brief Whether timemult was given.  */
  unsigned int datasize_given ;	/**< @brief Whether datasize was given.  */
  unsigned int filename_given ;	/**< @brief Whether filename was given.  */
  unsigned int nway_given ;	/**< @brief Whether nway was given.  */
  unsigned int root_given ;	/**< @brief Whether root was given.  */
  unsigned int segmentsize_given ;	/**< @brief Whether segmentsize was given.  */
  unsigned int nb_given ;	/**< @brief Whether nb was given.  */
  unsigned int nb_poll_given ;	/**< @brief Whether nb-poll was given.  */
  unsigned int cpu_given ;	/**< @brief Whether cpu was given.  */
  unsigned int traces_given ;	/**< @brief Whether traces was given.  */
  unsigned int traces_start_given ;	/**< @brief Whether traces-start was given.  */
  unsigned int traces_nops_given ;	/**< @brief Whether traces-nops was given.  */
  unsigned int traces_extr_given ;	/**< @brief Whether traces-extr was given.  */
  unsigned int traces_print_given ;	/**< @brief Whether traces-print was given.  */
  unsigned int traces_nop2p_given ;	/**< @brief Whether traces-nop2p was given.  */
  unsigned int traces_nocolls_given ;	/**< @brief Whether traces-nocolls was given.  */
  unsigned int traces_nbcify_given ;	/**< @brief Whether traces-nbcify was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_ptrn_values[];  /**< @brief Possible values for ptrn. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
